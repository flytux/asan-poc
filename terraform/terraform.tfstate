{
  "version": 4,
  "terraform_version": "1.7.3",
  "serial": 239,
  "lineage": "2c2af73a-c89e-eafc-cc39-93d5f94ae8b6",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "deploy_devops",
      "provider": "provider[\"registry.opentofu.org/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "#!/bin/bash\n\necho \"==== Start installing devops services ====\"\n\necho \"==== 1) Install Harbor ====\"\n\nhelm repo add harbor https://helm.goharbor.io --force-update\n\nkubectl create ns harbor\n\nkubectl create secret tls harbor-ingress-tls --key artifacts/harbor.key --cert artifacts/harbor.crt -n harbor\n\ncat \u003c\u003c EOF \u003e harbor.yaml\nexpose:\n  tls:\n    certSource: secret\n    secret:\n      secretName: \"harbor-ingress-tls\"\n  ingress:\n    hosts:\n      core: harbor.amc.seoul.kr\nexternalURL: https://harbor.amc.seoul.kr\nEOF\n\nhelm upgrade -i harbor harbor/harbor --wait -n harbor -f harbor.yaml\n\nnerdctl login harbor.amc.seoul.kr -u admin -p Harbor12345\n\n\necho \"==== 2) Install Gitlab ====\"\n\nhelm repo add gitlab https://charts.gitlab.io --force-update\n\nhelm upgrade -i gitlab gitlab/gitlab --wait --timeout 10m \\\n  --version 8.3.2 \\\n  --set global.edition=ce \\\n  --set global.hosts.domain=amc.seoul.kr \\\n  --set global.ingress.configureCertmanager=false \\\n  --set global.ingress.provider=traefik \\\n  --set global.ingress.class=traefik \\\n  --set certmanager.install=false \\\n  --set nginx-ingress.enabled=false \\\n  --set gitlab-runner.install=false \\\n  --set prometheus.install=false \\\n  --set registry.enabled=false \\\n  -n gitlab --create-namespace\n\nkubectl get -n gitlab secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' | base64 -d\n\nkubectl create secret tls gitlab-ingress-tls --key artifacts/gitlab.key --cert artifacts/gitlab.crt -n gitlab\n\nkubectl patch ingress gitlab-webservice-default -n gitlab --type='json' -p='[{\"op\" : \"replace\" ,\"path\" : \"/spec/tls/0/secretName\" ,\"value\" : \"gitlab-ingress-tls\"}]'\n\nkubectl get cm coredns -n kube-system -o yaml | sed 's/ready/ready\\n        hosts {\\n          192.168.100.1 gitlab.amc.seoul.kr\\n          fallthrough\\n        }/' | kubectl replace -f -\n\nkubectl rollout restart deploy coredns -n kube-system\n\necho \"==== 3) Prepare Gitlab Runner  ====\"\n\nopenssl s_client -showcerts -connect gitlab.amc.seoul.kr:443 -servername gitlab.amc.seoul.kr \u003c /dev/null 2\u003e/dev/null | openssl x509 -outform PEM \u003e gitlab.amc.seoul.kr.crt\n\nkubectl create secret generic gitlab-runner-tls --from-file=gitlab.amc.seoul.kr.crt  -n gitlab\n\ncat \u003c\u003c EOF \u003e gitlab-runner-values.yaml\ngitlabUrl: https://gitlab.amc.seoul.kr\n\nrunnerToken: glrt-vZuAwYks8JRqx5GULT-f\nrbac:\n  create: true\n\ncertsSecretName: gitlab-runner-tls \n\nrunners:\n  config: |\n    [[runners]]\n      [runners.kubernetes]\n        namespace = \"{{.Release.Namespace}}\"\n        image = \"ubuntu:20.04\"\n    [[runners.kubernetes.volumes.pvc]]\n      mount_path = \"/cache/maven.repository\"\n      name = \"gitlab-runner-cache-pvc\"\nEOF\n\nkubectl -n gitlab apply -f - \u003c\u003c\"EOF\"\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: gitlab-runner-cache-pvc\n  namespace: gitlab\nspec:\n  storageClassName: nfs-csi\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\nEOF\n\necho \"==== 4) Import Repository and Install runner  ====\"\n\n\necho \"==== Create user argo / abcd!234  ====\"\necho \"==== Admin \u003e Setting \u003e  General \u003e Import and Export \u003e Repository by URL  ====\"\necho \"==== Import https://github.com/flytux/kw-mvn, kw-mvn-deploy  ====\"\n\n\necho \"==== 5) Install ArgoCD  ====\"\n\nkubectl create namespace argocd\n\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\nkubectl patch cm argocd-cmd-params-cm -n argocd --type merge -p '{\"data\":{\"server.insecure\": \"true\"}}'\n\nkubectl rollout restart deploy argocd-server -n argocd\n\nkubectl -n argocd apply -f - \u003c\u003c\"EOF\"\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: argocd-server\n  namespace: argocd\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`argocd.amc.seoul.kr`)\n      priority: 10\n      services:\n        - name: argocd-server\n          port: 80\n    - kind: Rule\n      match: Host(`argocd.amc.seoul.kr`) \u0026\u0026 Headers(`Content-Type`, `application/grpc`)\n      priority: 11\n      services:\n        - name: argocd-server\n          port: 80\n          scheme: h2c\n  tls: {}\nEOF\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n#kubectl exec -it -n argocd $(k get pods -l app.kubernetes.io/name=argocd-server -o name -n argocd) bash\n#\n#argocd login argocd-server.argocd --insecure --username admin --password ysdspBnfCeXOqIoK\n#\n#argocd repo add https://gitlab.amc.seoul.kr/argo/kw-mvn-deploy.git --username argo --insecure-skip-server-verification\n#\n## Create ArgoCD applications\n#\n#$ kubectl -n argocd apply -f - \u003c\u003c\"EOF\"\n#apiVersion: argoproj.io/v1alpha1\n#kind: Application\n#metadata:\n#  name: kw-mvn\n#spec:\n#  destination:\n#    name: ''\n#    namespace: deploy\n#    server: 'https://kubernetes.default.svc'\n#  source:\n#    path: .\n#    repoURL: 'https://gitlab.amc.seoul.kr/argo/kw-mvn-deploy.git'\n#    targetRevision: main\n#  sources: []\n#  project: default\n#  syncPolicy:\n#    syncOptions:\n#      - CreateNamespace=true\n#EOF\n#\n#Kiali \n#\n#rancher-monitoring:104.0.0+up45.31.1\n#while :; do curl -s 192.168.122.11:31380/productpage | grep -o \"\u003ctitle\u003e.*\u003c/title\u003e\"; sleep 0.1; done\n#\n#Logging\n#\n#helm repo add grafana https://grafana.github.io/helm-charts\n#\n#helm repo add kube-logging https://kube-logging.github.io/helm-charts\n#\n#helm upgrade --install --wait --create-namespace --namespace logging logging-operator kube-logging/logging-operator\n#\n#helm fetch grafana/loki --version 2.9.1\n#\n#tar xvf loki-2.9.1.tgz\n#\n#rm loki/templates/podsecuritypolicy.yaml\n#\n#helm upgrade -i loki loki -n logging\n#\n#kubectl -n logging apply -f - \u003c\u003c\"EOF\"\n#apiVersion: logging.banzaicloud.io/v1beta1\n#kind: Output\n#metadata:\n# name: loki-output\n#spec:\n# loki:\n#   url: http://loki:3100\n#   configure_kubernetes_labels: true\n#   buffer:\n#     timekey: 1m\n#     timekey_wait: 30s\n#     timekey_use_utc: true\n#EOF\n#\n#kubectl -n logging apply -f - \u003c\u003c\"EOF\"\n#apiVersion: logging.banzaicloud.io/v1beta1\n#kind: Flow\n#metadata:\n#  name: loki-flow\n#spec:\n#  filters:\n#    - tag_normaliser: {}\n#    - parser:\n#        remove_key_name_field: true\n#        reserve_data: true\n#        parse:\n#          type: nginx\n#  match:\n#    - select:\n#        labels:\n#          app.kubernetes.io/name: log-generator\n#  localOutputRefs:\n#    - loki-output\n#EOF\n#\n#kubectl -n logging apply -f - \u003c\u003c\"EOF\"\n#apiVersion: logging.banzaicloud.io/v1beta1\n#kind: Logging\n#metadata:\n#  name: default-logging-simple\n#spec:\n#  fluentd:\n#    logLevel: debug\n#  fluentbit: {}\n#  controlNamespace: logging\n#EOF\n#\n#helm upgrade --install --wait --create-namespace --namespace logging log-generator kube-logging/log-generator\n#\n#\n#\n#kubectl get secret -n logging default-logging-simple-fluentd-app -o jsonpath='{.data.fluentd\\.conf}' | base64 -d\n#\n#Add Grafana Loki Datasource and Explore log\n#\n",
            "content_base64": null,
            "content_base64sha256": "qBuAzwaM3MIYqILBCNPxdhpKqS1QX+rjCXnL/F8XsaI=",
            "content_base64sha512": "37ZArPBdDR1UUSG3eT9a919cvYi0fEf/wxxm/kCFKwAzBdCf5nCTs+vukwF+LPO69glsP1tPJxWHcVykKI2kDQ==",
            "content_md5": "eea3a70170a254d616901fa479c6c22d",
            "content_sha1": "b803f307c8bd87d7150529f1d5ac184e69f2ca07",
            "content_sha256": "a81b80cf068cdcc218a882c108d3f1761a4aa92d505feae30979cbfc5f17b1a2",
            "content_sha512": "dfb640acf05d0d1d545121b7793f5af75f5cbd88b47c47ffc31c66fe40852b003305d09fe67093b3ebee93017e2cf3baf6096c3f5b4f271587715ca4288da40d",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./artifacts/deploy-devops.sh",
            "id": "b803f307c8bd87d7150529f1d5ac184e69f2ca07",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "deploy_outer",
      "provider": "provider[\"registry.opentofu.org/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "#!/bin/bash\n\necho \"==== Start installing outer services ====\"\n\necho \"==== 1) Install Cert-manager ====\"\n\nhelm repo add jetstack https://charts.jetstack.io --force-update\n\nhelm upgrade -i --wait \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.15.3 \\\n  --set crds.enabled=true\n\necho \"==== 2) Install Rancher ====\"\n\nhelm repo add rancher-latest https://releases.rancher.com/server-charts/latest\n\nhelm repo update\n\nhelm upgrade -i rancher rancher-latest/rancher \\\n--set hostname=rancher.amc.seoul.kr --set bootstrapPassword=admin \\\n--set replicas=1 --set global.cattle.psp.enabled=false \\\n--set auditLog.level=1 \\\n--create-namespace -n cattle-system\n\necho \"==== 3) NFS-CSI Storage Class ====\"\n#apt install nfs-server -y # Ubuntu\ndnf install nfs-utils -y   # Rocky\n\nmkdir -p /mnt/nfs/pvc\nchmod 707 /mnt/nfs/pvc\nchown -R 65534:65534 /mnt/nfs/pvc\n\ncat \u003c\u003c EOF \u003e /etc/exports\n/mnt/nfs/pvc 192.168.122.11(rw,sync,no_root_squash)\n/mnt/nfs/pvc 192.168.122.12(rw,sync,no_root_squash)\n/mnt/nfs/pvc 192.168.122.13(rw,sync,no_root_squash)\nEOF\n\nsystemctl enable nfs-server --now\n\nexportfs -v\n\ncurl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/v4.5.0/deploy/install-driver.sh | bash -s v4.5.0 --\n\nsleep 15\n\ncat \u003c\u003cEOF \u003e nfs-sc.yml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-csi\nprovisioner: nfs.csi.k8s.io\nparameters:\n  server: 192.168.122.11 \n  share: /mnt/nfs/pvc \n  mountPermissions: \"0777\"\nreclaimPolicy: Retain \nvolumeBindingMode: Immediate\nmountOptions:\n  - nfsvers=4.1\nEOF\n\nkubectl apply -f nfs-sc.yml\n\nkubectl create -f https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/example/pvc-nfs-csi-dynamic.yaml\n\nkubectl get pvc\n\nkubectl patch storageclass nfs-csi -n kube-system -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\ncurl -L  https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/high-availability-1.21+.yaml | sed 's/- --metric-resolution=15s/- --metric-resolution=15s\\n        - --kubelet-insecure-tls/' | kubectl apply -f -\n",
            "content_base64": null,
            "content_base64sha256": "Sq2cj6TG/LB7SUaD6ntJpYtAL4NFVxNsjY96IVS9PZ4=",
            "content_base64sha512": "LDrBjsDeeM45f/oOfdP3gVl5szkt+dXk49Bcs7EG/Irm5dguVyfbTLWvdN6bqvCJgb/tlK3cPngVFqmA3MiBsg==",
            "content_md5": "a274ff8a2656b3c714b455fdf6b3a4bc",
            "content_sha1": "fd620cbcaa26e84ddb6bbf2b4360267aac7739bf",
            "content_sha256": "4aad9c8fa4c6fcb07b494683ea7b49a58b402f834557136c8d8f7a2154bd3d9e",
            "content_sha512": "2c3ac18ec0de78ce397ffa0e7dd3f7815979b3392df9d5e4e3d05cb3b106fc8ae6e5d82e5727db4cb5af74de9baaf08981bfed94addc3e781516a980dcc881b2",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./artifacts/deploy-outer.sh",
            "id": "fd620cbcaa26e84ddb6bbf2b4360267aac7739bf",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "terraform_data",
      "name": "copy_certs",
      "provider": "provider[\"terraform.io/builtin/terraform\"]",
      "instances": [
        {
          "index_key": "master1",
          "schema_version": 0,
          "attributes": {
            "id": "ae8850e0-2b76-e520-2576-23fad1cc5386",
            "input": null,
            "output": null,
            "triggers_replace": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "terraform_data.prepare_certs"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "terraform_data",
      "name": "deploy_devops",
      "provider": "provider[\"terraform.io/builtin/terraform\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "c31189a5-bd96-4a14-1959-a82deed92431",
            "input": null,
            "output": null,
            "triggers_replace": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "local_file.deploy_outer",
            "terraform_data.deploy_outer"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "terraform_data",
      "name": "deploy_outer",
      "provider": "provider[\"terraform.io/builtin/terraform\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "b46ebdd0-a0c4-e3b4-950d-8959d62d6b25",
            "input": null,
            "output": null,
            "triggers_replace": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "local_file.deploy_outer"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "terraform_data",
      "name": "prepare_certs",
      "provider": "provider[\"terraform.io/builtin/terraform\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "cf8bf8a4-a075-b456-1cb5-d2004445b2d7",
            "input": null,
            "output": null,
            "triggers_replace": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
